// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-tvos14.3-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Inthegametv
import AVFoundation/*.AVMakeRect*/
import Foundation
@_exported import Inthegametv
import PusherSwift
import Swift
import UIKit
public protocol ITGOverlayDelegate : AnyObject {
  func overlayRequestedPause()
  func overlayRequestedPlay()
  func overlayRequestedFocus()
  func overlayReleasedFocus()
}
public protocol ITGLayoutDelegate : AnyObject {
  func customPollView() -> Inthegametv.ITGPollView?
  func customRatingView() -> Inthegametv.ITGRatingView?
  func customTriviaView() -> Inthegametv.ITGTriviaView?
  func customNoticeView() -> Inthegametv.ITGNotice?
}
public enum ITGAnimationType {
  case fromRight
  case fromBottom
  public static func == (a: Inthegametv.ITGAnimationType, b: Inthegametv.ITGAnimationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class ITGOverlayView : UIKit.UIView {
  weak public var delegate: Inthegametv.ITGOverlayDelegate?
  weak public var layoutDelegate: Inthegametv.ITGLayoutDelegate?
  public var bottomMargin: CoreGraphics.CGFloat
  public var animationType: Inthegametv.ITGAnimationType
  public var showNotices: Swift.Bool
  public func load(channelID: Swift.String, broadcasterName: Swift.String, delegate: Inthegametv.ITGOverlayDelegate?, language: Swift.String = "en", devMode: Swift.Bool = false, userBroadcasterForeignID: Swift.String? = nil, userInitialName: Swift.String? = nil)
  public class func resetUser()
  public func closeInteractionIfNeeded() -> Swift.Bool
  public func isDisplayingInteraction() -> Swift.Bool
  public func videoPaused()
  public func videoPlaying(time: Swift.Double)
  @objc override dynamic public func didMoveToWindow()
  @objc override dynamic public var preferredFocusEnvironments: [UIKit.UIFocusEnvironment] {
    @objc get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ITGTriviaView : Inthegametv.ITGInteractionView, Inthegametv.NibView {
  open func createAnswerView() -> Inthegametv.ITGTriviaAnswerView
  open func didAnswerTrivia()
  open func didLoadView()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ITGPollAnswerView : UIKit.UIView, Inthegametv.NibView {
  @objc @IBOutlet weak public var button: UIKit.UIButton!
  @objc @IBOutlet weak public var statsLabel: UIKit.UILabel!
  @objc override dynamic public func awakeFromNib()
  open func setButtonStyleNormal()
  open func setButtonStyleCompleted(selected: Swift.Bool)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ITGRatingView : Inthegametv.ITGInteractionView, Inthegametv.NibView {
  @objc @IBOutlet weak public var subtitleLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var statsContainer: UIKit.UIView!
  @objc @IBOutlet weak public var statsUserLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var statsTotalLabel: UIKit.UILabel!
  open func createAnswerView() -> Inthegametv.ITGRatingAnswerView
  open func didAnswerRating()
  open func didLoadView()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ITGPollView : Inthegametv.ITGInteractionView, Inthegametv.NibView {
  open func createAnswerView() -> Inthegametv.ITGPollAnswerView
  open func didAnswerPoll()
  open func didLoadView()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ITGTriviaAnswerView : UIKit.UIView, Inthegametv.NibView {
  @objc @IBOutlet weak public var button: UIKit.UIButton!
  @objc @IBOutlet weak public var titleLabel: UIKit.UILabel?
  @objc @IBOutlet weak public var checkMarkView: UIKit.UIImageView?
  @objc @IBOutlet weak public var imageView: UIKit.UIImageView?
  @objc @IBOutlet weak public var imageConstraint: UIKit.NSLayoutConstraint?
  @objc override dynamic public func awakeFromNib()
  open func setButtonStyleNormal()
  open func setButtonStyleCorrect()
  open func setButtonStyleIncorrect()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ITGNotice : UIKit.UIView, Inthegametv.NibView {
  @objc override dynamic public func awakeFromNib()
  @objc @IBAction public func actionClose(_ sender: Any)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ITGRatingAnswerView : UIKit.UIView, Inthegametv.NibView {
  @objc @IBOutlet weak public var button: UIKit.UIButton!
  @objc override dynamic public func awakeFromNib()
  open func setButtonStyleNormal()
  open func setButtonStyleCompleted(selected: Swift.Bool)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol NibView {
  static func nibName() -> Swift.String
}
extension NibView {
  public static func nibName() -> Swift.String
}
extension NibView where Self : UIKit.UIView {
  public static func fromNib() -> Self
}
extension UIImage {
  public class func imageWithColor(_ color: UIKit.UIColor) -> UIKit.UIImage
}
@objc @_inheritsConvenienceInitializers open class ITGInteractionView : UIKit.UIView {
  @objc @IBOutlet weak public var mainButton: UIKit.UIButton!
  @objc @IBOutlet weak public var closeButton: UIKit.UIButton!
  @objc @IBOutlet weak public var titleLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var answerStack: UIKit.UIStackView!
  @objc @IBOutlet weak public var timerView: UIKit.UIView!
  @objc @IBOutlet weak public var timerLabel1: UIKit.UILabel!
  @objc @IBOutlet weak public var timerLabel2: UIKit.UILabel!
  @objc @IBOutlet weak public var indicator: UIKit.UIActivityIndicatorView?
  @objc @IBOutlet weak public var closeIcon: UIKit.UIImageView!
  @objc @IBOutlet weak public var backgroundView: UIKit.UIView!
  @objc @IBOutlet weak public var mainContainer: UIKit.UIView!
  @objc @IBOutlet weak public var promotionContainer: UIKit.UIView!
  @objc @IBOutlet weak public var promotionFlipContainer: UIKit.UIView!
  @objc @IBOutlet weak public var scrollView: UIKit.UIScrollView?
  @objc @IBOutlet weak public var fixedWConstraint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet weak public var expandedWConstraint: UIKit.NSLayoutConstraint?
  @objc override dynamic public func awakeFromNib()
  @objc override dynamic public var preferredFocusEnvironments: [UIKit.UIFocusEnvironment] {
    @objc get
  }
  @objc override dynamic public func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Inthegametv.ITGAnimationType : Swift.Equatable {}
extension Inthegametv.ITGAnimationType : Swift.Hashable {}
